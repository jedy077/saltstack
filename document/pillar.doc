Pillar 에 STATIC DATA 저장

pillar는 무엇인가 ?
pillar 는 minion에게 global value 를 전달하는 interface이다. 
pillar data는 salt state tree의 구조와 비슷한 구조를 가진다. 
(grains 는 미니언에서 MASTER 로 데이터 FLOW를 가진다면, PILLAR 는 MASTER에서 MINION으로의 데이터 FLOW 를 가진다. )


* PILLAR 사용법
1. pillar_roots : file_root와 같은 구조로 pillar directory를 지정하여 상요한다. 기본적으로 /etc/salt/master config 파일에 아래와 같이 선언되어 있다. 

pillar_roots:
  base:
    - /srv/pillar

pillar data 는state top file과 동일하게 topfile을 이용하여  matching 되는 MINION에게 MAPPING 되어 있다. 

/srv/pillar/top.sls
[root@centos01 pillar]# cat top.sls 
base:
  '*':
    - packages
  'web*':
    - vim
  'os:Devian':
    - match: grain
    - servers

PILLAR TOP파일은 모든 미니언에게 packages.sls 를 전달하며, web으로 시작되는 minion에게는 추가로 vim.sls 를 전달한다. 
또한 os:Devian 은 match grain 즉 grain 정보를 사용하여 os 가 Devian 인 놈에게 servers 를 제공한다. 


pillar key_word : 
ignore_missing  - 이 부분은 누락된 Pillar 파일의 모든 오류가 무시됩니다. default 값은 false이다. 

base:
  '*':
    - servers
    - systems
    - ignore_missing: True

Pillar sls FILE
[root@centos01 pillar]# vi packages.sls 

{% if grains['os'] == 'RedHat' %}
apache: httpd
git: git
{% elif grains['os'] == 'Devian' %}
apache: apache2
git: git-core
{% endif %}

company: foo Indestries

pillar 는 PYTHON의 DICTINARY TYPE 이다. 위와 같이 sls 파일은 key 에 해당되는 value 값을 변환할 수 있다.  만약 state 문장에서 pkg.inistall: -name : apache 라고 정의 된다면, RedHat minion은 apache를 httpd 로 이해할 것이며, Devian에서는 apache2 로 이해할 것이다. 

pillar를 state 문에 사용할 때는 아래와 같이 사용한다. 

apache:
  pkg.installed:
    - name: {{ pillar['apache'] }}

git:
  pkg.installed:
    - name {{ pillar['git'] }}


state.sls 작성시 pillar['key']방식으로 표현하면, minion은 해당 pillar 의 key 값을 차좀하며 value 로 변환하여 running 이 된다. 

*Dynamic pillar environment
pillar_roots:
  __env__:
    - /srv/pillar

ext_pillar:
  - git:
    - __env__ https://example.com/git-pillar.git

# pillar_roots	에 명시적으로 지정되지 않은 환경은__env__에서 directory로 mapping된다. 

#git 을 이용하여 __env__를 표시함으로써, 다양한 환경을 mapping 할수 있다. 


pillar namespace flattening
만약 TOP 파일에 PILLAR SLS 파일이 지정되어 있으며, 각 PILLAR SLS 파일에서 KEY 값이 중복 되어있는 경우 순서에 따라 아래와 같이 무시된다. 

top.sls

base:
  '*':
    - packages
    - services

pakages.sls 파일에
bind: bind9

serivces.sls 파일에
bind: named 

위의 경우 bind 라는 key 가 중복으로 적용 되었으나, top.sls 파일에 의해 services.sls 파일에 있는 bind: named 가 사용되어지며, bind: bind9 는 무시된다. 

즉, services.sls 이 가작 최근(마지막 라인)에 적용 되었기 때문에 이전에 충돌된 내용은 무시된다.


Pillar Dictinaly Merge
아래와 같으 환경이 있다고 가정하자
top.sls
base:
  '*':
    - pakcages
    - services


pakcages.sls
bind:
  pakage-name: bind9
  version: 9.9.5


services
bind: 
  port: 53
  listen-on: any

이 환경에서 bind pillar 가 2번 정의 되었지만, 이전과는 다르게 key 의 중복이 없으므로 bind pillar 는 아래와 같이 merge 된다. 
bind:
  pakage-name: bind9
  version: 9.9.5
  port: 53
  listen-on: any

[root@centos01 pillar]# salt-call pillar.get bind
local:
    ----------
    linsten-on:
        any
    pakcage-name:
        bind9
    port:
        53
    version:
        9.9.5


*** INCLUDING OTHER PILLARS  : include keyword 를 사용하여 sls 파일을 중첩할수 있다. 
include:
  - users

include:
  - users:
      defaults:
          sudo: ['bob', 'paul']
      key: users


이부분은 잘 이해가 안됨. -- 다시 확인해 봐야 함. 


IN-MEMORY PILLAR DATA VS. ON-DEMAND PILLAR DATA ( memory에 저장되어 있는 pillar data와 요구에 따라 사용되어지닌 pillar data)

pillar data compiling 은 매번 요청 할 경우, master 에게 요청하고 master는 compiling 하여 복사본을 minion에게 전달 하는 등 많은 비용이 든다. 
이에 따라2가지 방식의 pillar 데이터를 제공한다. 
1) IN-MEMORY : pillar data를 메모리에 상주시키며, 필요시 메모리를 참조하여 pillar 값을 확인 한다	- pillar.item pillar.get pillar.raw 를 사용하여 반환되는 데이터들은 memory에 상주 된다. 
        - 또한 comtomed excution module 로 사용된 pillar 데이터는 __pillar__ 에 상주 되어진다. (무슨말인지)
	- in-memroy pillar data는 minion 이 시작될 때발생되어지며, saltutil.refresh_pillar 로 refresh 할수 있다. ( salt '*' saltutil.refresh_pillar )- return 값은None 을 발생한다. 
2) ON-DEMAND : 어떤 특정 동작 working은 최신의 filler data를 사용할 수 있도록 해야 한다. 
	보통 running states 나 running pillar.items
	** in-memory pillar data 는 최신의 data로 update 하지 않는다 running state 이나 pillar items 와 같은 동작이 이뤄져야 update 된 최신의 데이터를 얻을 수 있다. 

위의 경우 bind 라는 key 가 중복으로 적용 되었으나, top.sls 파일에 의해 services.sls 파일에 있는 bind: named 가 사용되어지며, bind: bind9 는 무시된다. 

pillar environment 다루기

기본적으로 minion 은 모든 환경의 pillar data 를 merge 하여 사용한다. (자원을 많이 쓴다. )
이러한 부분을 해결하도록 아래와 같이 효율 적으로 사용할 수이 있다. 

minion의 config 파일에서 (/etc/salt/minion)
pillarenv: base 
라고 설정해 두면, 이 minion의 pillar 데이터는 모든 merged pillar data 가 아닌 base에 정의된 pillar data 만 사용하도록 한다. 

*** master에서 state 문을 실행할 때, pillar 를 재정의 할수도 있다. 
  -- salt '*' state.apply mystate pillarenv=testing
	in-memory는 수정되지 않는다. 

minion config 에서 'pillarenv_from_saltenv 갑을 True'로 설정시, pillar envirooment 는 state envirionment(saltenv) 와 동일하게 사용되어진다. 

salt '*' state.apply mystates saltenv=dev  ( pillarenv_from_saltenv)
salt '*' state.apply mystates saltenv=dev pillarenv=dev
두 문장은 동일.

** pillar data viewing
-pillar.item  : in-memory 상에 있는 하나이상의 key 값을 검색
-pillar.items : 새로운 piller direcotory를 검색하고, in-memory상에 상주. (모든 검색)
-pillar.raw   : 모든 piller diretory 검색 그라나 in-momory에 상주 안함
-pillar.get   : python dictionary 의 get 메소드와 동일

** CLI 를 통한 piller data 설정
salt '*' state.apply piller='{"cheese":"spam"}'


pillar encryption 은 문서 참조.
